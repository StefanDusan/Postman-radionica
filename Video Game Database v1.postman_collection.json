{
	"info": {
		"_postman_id": "1d559cdd-fbd8-4747-a204-a682e91e7bc1",
		"name": "Video Game Database v1",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Get List of all Video Games",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var body = JSON.parse(responseBody);\r",
							"var list = body.length;\r",
							"pm.environment.set(\"nextID\", body[list-1].id + 1);\r",
							"\r",
							"//response validations\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"\tpm.response.to.have.status(200);\r",
							"});\r",
							"pm.test(\"Response schema is correct\", function () {\r",
							"\tpm.response.to.have.jsonSchema(pm.environment.get(\"videoGamesListSchema\"));\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Accept",
						"value": "application/json",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{url}}:{{port}}/app/videogames",
					"host": [
						"{{url}}"
					],
					"port": "{{port}}",
					"path": [
						"app",
						"videogames"
					]
				}
			},
			"response": []
		},
		{
			"name": "Add a new video game",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"eval(globals.videoGameListAll)();"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"//response validations\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"\tpm.response.to.have.status(200);\r",
							"});\r",
							"pm.test(\"Message 'Record Added Successfully' is displayed\", function () {\r",
							"\tvar jsonData = JSON.parse(responseBody);\r",
							"\tpm.expect(jsonData.status === \"Record Added Successfully\").to.be.eql(true); \r",
							"});\r",
							"\r",
							"//clean up\r",
							"if (pm.response.code === 200) {\r",
							"\tpm.environment.set(\"maxID\", pm.environment.get(\"nextID\"));\r",
							"\tpm.environment.set(\"nextID\", pm.environment.get(\"nextID\") + 1);\r",
							"\teval(globals.videoGameDelete)();\r",
							"}"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Accept",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n\t\"id\": {{nextID}},\r\n\t\"name\": \"Resident Evil XXL\",\r\n\t\"releaseDate\": \"2021-02-07\",\r\n\t\"reviewScore\": 55,\r\n\t\"category\": \"Shooter\",\r\n\t\"rating\": \"Universal\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{url}}:{{port}}/app/videogames",
					"host": [
						"{{url}}"
					],
					"port": "{{port}}",
					"path": [
						"app",
						"videogames"
					]
				}
			},
			"response": []
		},
		{
			"name": "Delete a video game",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//response validations\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"\tpm.response.to.have.status(200);\r",
							"});\r",
							"pm.test(\"Message 'Record Deleted Successfully' is displayed\", function () {\r",
							"\tvar jsonData = JSON.parse(responseBody);\r",
							"\tpm.expect(jsonData.status === \"Record Deleted Successfully\").to.be.eql(true); \r",
							"});\r",
							"\r",
							"if (pm.response.code === 200) {\r",
							"\tpm.environment.set(\"nextID\",pm.environment.get(\"maxID\"));\r",
							"\tpm.environment.unset(\"maxID\");\r",
							"}"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"eval(globals.videoGameCreate)();"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [
					{
						"key": "Accept",
						"value": "application/json",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{url}}:{{port}}/app/videogames/{{maxID}}",
					"host": [
						"{{url}}"
					],
					"port": "{{port}}",
					"path": [
						"app",
						"videogames",
						"{{maxID}}"
					]
				}
			},
			"response": []
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					"//************************************************************************************************",
					"// Schema for 'Get List of all Video Games' ******************************************************",
					"//************************************************************************************************",
					"const videoGamesListSchema = ",
					"{",
					"    \"type\": \"array\",",
					"\t\"items\": [{",
					"\t\t\"type\": \"object\",",
					"\t\t\"properties\": {",
					"\t\t\t\"id\": {",
					"\t\t\t\t\"type\": \"integer\"",
					"\t\t\t},",
					"\t\t\t\"name\": {",
					"\t\t\t\t\"type\": \"string\"",
					"\t\t\t},",
					"\t\t\t\"releaseDate\": {",
					"\t\t\t\t\"type\": \"string\"",
					"\t\t\t},",
					"\t\t\t\"reviewScore\": {",
					"\t\t\t\t\"type\": \"integer\"",
					"\t\t\t},",
					"\t\t\t\"category\": {",
					"\t\t\t\t\"type\": \"string\"",
					"\t\t\t},",
					"\t\t\t\"rating\": {",
					"\t\t\t\t\"type\": \"string\"",
					"\t\t\t}",
					"\t\t},",
					"\t\t\"required\": [",
					"\t\t\t\"id\",",
					"\t\t\t\"name\",",
					"\t\t\t\"releaseDate\",",
					"\t\t\t\"reviewScore\",",
					"\t\t\t\"category\",",
					"\t\t\t\"rating\"",
					"\t\t]",
					"\t}]",
					"};",
					"pm.environment.set(\"videoGamesListSchema\", videoGamesListSchema);",
					"",
					"postman.setGlobalVariable(\"videoGameListAll\", () => {",
					"\tpm.sendRequest({",
					"\t\turl: `${pm.environment.get(\"url\")}:${pm.environment.get(\"port\")}/app/videogames`,",
					"\t\tmethod: \"GET\",",
					"\t\theader: {",
					"\t\t\t'Content-Type': 'application/json',",
					"\t\t\t'Accept': 'application/json'",
					"\t\t},",
					"\t\tbody: {",
					"\t\t\tmode: 'raw',",
					"\t\t\traw: JSON.stringify({})",
					"\t\t}",
					"\t}, function(err, res) {",
					"\t\tif (err) {",
					"\t\t\tconsole.log(err ? err : res.json());",
					"\t\t} else {",
					"\t\t\tvar list = res.json().length;",
					"\t\t\tpm.environment.set(\"nextID\", res.json()[list-1].id + 1);\t\t\t",
					"\t\t\tconsole.log(\"Next free ID: \" + pm.environment.get(\"nextID\"));",
					"\t\t}",
					"\t});",
					"});",
					"",
					"postman.setGlobalVariable(\"videoGameCreate\", () => {",
					"\t//1. determine next free ID",
					"\teval(globals.videoGameListAll)();",
					"\t//2. wait for 1000 ms (for previous request to finish) then send request to create video game",
					"    setTimeout(function(){",
					"\t\tpm.sendRequest({",
					"\t\t\turl: `${pm.environment.get(\"url\")}:${pm.environment.get(\"port\")}/app/videogames`,",
					"\t\t\tmethod: \"POST\",",
					"\t\t\theader: {",
					"\t\t\t\t'Content-Type': 'application/json',",
					"\t\t\t\t'Accept': 'application/json, application/hal+json'",
					"\t\t\t},",
					"\t\t\tbody: {",
					"\t\t\t\tmode: 'raw',",
					"\t\t\t\traw:JSON.stringify({ ",
					"\t\t\t\t\t'id': `${pm.environment.get(\"nextID\")}`,",
					"\t\t\t\t\t'name': \"Resident Evil XXL\",",
					"\t\t\t\t\t'releaseDate': \"2021-02-07T21:47:39.715Z\",",
					"\t\t\t\t\t'reviewScore': 55,",
					"\t\t\t\t\t'category': \"Shooter\",",
					"\t\t\t\t\t'rating': \"Universal\"",
					"\t\t\t\t})",
					"\t\t\t}",
					"\t\t}, function(err, res) {",
					"\t\t\tif (err) {",
					"\t\t\t\tconsole.log(err ? err : res.json());",
					"\t\t\t} else {",
					"\t\t\t\tpm.environment.set(\"maxID\", pm.environment.get(\"nextID\"));",
					"\t\t\t\tpm.environment.set(\"nextID\", pm.environment.get(\"nextID\") + 1);",
					"\t\t\t}",
					"\t\t})",
					"\t}, 1000);",
					"});",
					"",
					"postman.setGlobalVariable(\"videoGameDelete\", () => {",
					"\tpm.sendRequest({",
					"\t\turl: `${pm.environment.get(\"url\")}:${pm.environment.get(\"port\")}/app/videogames/${pm.environment.get(\"maxID\")}`,",
					"\t\tmethod: \"DELETE\",",
					"\t\theader: {",
					"\t\t\t'Content-Type': 'application/json',",
					"\t\t\t'Accept': 'application/json'",
					"\t\t},",
					"\t\tbody: {",
					"\t\t\tmode: 'raw',",
					"\t\t\traw: JSON.stringify({})",
					"\t\t}    ",
					"\t}, function(err, res) {",
					"\t\tif (err) {",
					"\t\t\tconsole.log(err ? err : res.json());",
					"\t\t} else {",
					"\t\t\tpm.environment.set(\"nextID\",pm.environment.get(\"maxID\"));",
					"\t\t\tpm.environment.unset(\"maxID\");",
					"\t\t}",
					"\t});",
					"});"
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	]
}